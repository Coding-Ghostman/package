"use strict";
/**
 * Generative AI Service Inference API
 * OCI Generative AI is a fully managed service that provides a set of state-of-the-art, customizable large language models (LLMs) that cover a wide range of use cases for text generation, summarization, and text embeddings.

Use the Generative AI service inference API to access your custom model endpoints, or to try the out-of-the-box models to [chat](#/en/generative-ai-inference/latest/ChatResult/Chat), [generate text](#/en/generative-ai-inference/latest/GenerateTextResult/GenerateText), [summarize](#/en/generative-ai-inference/latest/SummarizeTextResult/SummarizeText), and [create text embeddings](#/en/generative-ai-inference/latest/EmbedTextResult/EmbedText).

To use a Generative AI custom model for inference, you must first create an endpoint for that model. Use the [Generative AI service management API](/#/en/generative-ai/latest/) to [create a custom model](#/en/generative-ai/latest/Model/) by fine-tuning an out-of-the-box model, or a previous version of a custom model, using your own data. Fine-tune the custom model on a  [fine-tuning dedicated AI cluster](#/en/generative-ai/latest/DedicatedAiCluster/). Then, create a [hosting dedicated AI cluster](#/en/generative-ai/latest/DedicatedAiCluster/) with an [endpoint](#/en/generative-ai/latest/Endpoint/) to host your custom model. For resource management in the Generative AI service, use the [Generative AI service management API](/#/en/generative-ai/latest/).

To learn more about the service, see the [Generative AI documentation](/iaas/Content/generative-ai/home.htm).

 * OpenAPI spec version: 20231130
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CohereChatResponse = void 0;
const model = __importStar(require("../model"));
var CohereChatResponse;
(function (CohereChatResponse) {
    let FinishReason;
    (function (FinishReason) {
        FinishReason["Complete"] = "COMPLETE";
        FinishReason["ErrorToxic"] = "ERROR_TOXIC";
        FinishReason["ErrorLimit"] = "ERROR_LIMIT";
        FinishReason["Error"] = "ERROR";
        FinishReason["UserCancel"] = "USER_CANCEL";
        FinishReason["MaxTokens"] = "MAX_TOKENS";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        FinishReason["UnknownValue"] = "UNKNOWN_VALUE";
    })(FinishReason = CohereChatResponse.FinishReason || (CohereChatResponse.FinishReason = {}));
    function getJsonObj(obj, isParentJsonObj) {
        const jsonObj = Object.assign(Object.assign({}, (isParentJsonObj ? obj : model.BaseChatResponse.getJsonObj(obj))), {
            "chatHistory": obj.chatHistory
                ? obj.chatHistory.map(item => {
                    return model.CohereMessage.getJsonObj(item);
                })
                : undefined,
            "citations": obj.citations
                ? obj.citations.map(item => {
                    return model.Citation.getJsonObj(item);
                })
                : undefined,
            "searchQueries": obj.searchQueries
                ? obj.searchQueries.map(item => {
                    return model.SearchQuery.getJsonObj(item);
                })
                : undefined,
            "toolCalls": obj.toolCalls
                ? obj.toolCalls.map(item => {
                    return model.CohereToolCall.getJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    CohereChatResponse.getJsonObj = getJsonObj;
    CohereChatResponse.apiFormat = "COHERE";
    function getDeserializedJsonObj(obj, isParentJsonObj) {
        const jsonObj = Object.assign(Object.assign({}, (isParentJsonObj
            ? obj
            : model.BaseChatResponse.getDeserializedJsonObj(obj))), {
            "chatHistory": obj.chatHistory
                ? obj.chatHistory.map(item => {
                    return model.CohereMessage.getDeserializedJsonObj(item);
                })
                : undefined,
            "citations": obj.citations
                ? obj.citations.map(item => {
                    return model.Citation.getDeserializedJsonObj(item);
                })
                : undefined,
            "searchQueries": obj.searchQueries
                ? obj.searchQueries.map(item => {
                    return model.SearchQuery.getDeserializedJsonObj(item);
                })
                : undefined,
            "toolCalls": obj.toolCalls
                ? obj.toolCalls.map(item => {
                    return model.CohereToolCall.getDeserializedJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    CohereChatResponse.getDeserializedJsonObj = getDeserializedJsonObj;
})(CohereChatResponse = exports.CohereChatResponse || (exports.CohereChatResponse = {}));
//# sourceMappingURL=cohere-chat-response.js.map